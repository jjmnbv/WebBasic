<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="User">

	<resultMap id="RM.User" type="com.jckj.webbasic.model.User">
        <result property="userId" column="USER_ID"/>
        <result property="userName" column="USER_NAME"/>
        <result property="password" column="PASSWORD"/>
        <result property="forbiddenFlag" column="FORBIDDEN_FLAG"/>
        <result property="employeeId" column="EMPLOYEE_ID"/>
        <result property="updatePwdTime" column="UPDATE_PWD_TIME"/>
        <result property="updateUserId" column="UPDATE_USER_ID"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="User.columns">
	    <![CDATA[
		USER_ID,USER_NAME,PASSWORD,FORBIDDEN_FLAG,EMPLOYEE_ID,UPDATE_PWD_TIME,UPDATE_USER_ID
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="User.insert" useGeneratedKeys="true" keyProperty="userId">
    <![CDATA[
        INSERT INTO t_user (
        	USER_ID ,
        	USER_NAME ,
        	PASSWORD ,
        	FORBIDDEN_FLAG ,
        	EMPLOYEE_ID ,
        	UPDATE_PWD_TIME ,
        	UPDATE_USER_ID 
        ) VALUES (
        	#{userId} ,
        	#{userName} ,
        	#{password} ,
        	#{forbiddenFlag} ,
        	#{employeeId} ,
        	#{updatePwdTime} ,
        	#{updateUserId} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="User.update" >
    <![CDATA[
        UPDATE t_user SET
	        USER_NAME = #{userName} ,
	        PASSWORD = #{password} ,
	        FORBIDDEN_FLAG = #{forbiddenFlag} ,
	        EMPLOYEE_ID = #{employeeId} ,
	        UPDATE_PWD_TIME = #{updatePwdTime} ,
	        UPDATE_USER_ID = #{updateUserId} 
        WHERE 
	        USER_ID = #{userId} 
    ]]>
	</update>

    <delete id="User.delete">
    <![CDATA[
        DELETE FROM t_user WHERE
        USER_ID = #{id} 
    ]]>
    </delete>
    
    <select id="User.getById" resultMap="RM.User">
		SELECT <include refid="User.columns" />
	    <![CDATA[
		    FROM t_user 
	        WHERE 
		        USER_ID = #{id} 
	    ]]>
	</select>
	
	<sql id="User.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(userId)">
				AND USER_ID = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(userName)">
				AND USER_NAME = #{userName}
			</if>
	       <if test="@Ognl@isNotEmpty(password)">
				AND PASSWORD = #{password}
			</if>
	       <if test="@Ognl@isNotEmpty(forbiddenFlag)">
				AND FORBIDDEN_FLAG = #{forbiddenFlag}
			</if>
	       <if test="@Ognl@isNotEmpty(employeeId)">
				AND EMPLOYEE_ID = #{employeeId}
			</if>
	       <if test="@Ognl@isNotEmpty(updatePwdTimeBegin)">
				AND UPDATE_PWD_TIME >= #{updatePwdTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updatePwdTimeEnd)">
				AND UPDATE_PWD_TIME &lt;= #{updatePwdTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateUserId)">
				AND UPDATE_USER_ID = #{updateUserId}
			</if>
		</where>
	</sql>
		
    <select id="User.findPage.count" resultType="long">
        SELECT count(*) FROM t_user 
		<include refid="User.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="User.findPage" resultMap="RM.User">
    	SELECT <include refid="User.columns" />
	    FROM t_user 
		<include refid="User.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

